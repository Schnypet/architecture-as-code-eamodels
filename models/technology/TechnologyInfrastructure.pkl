module TechnologyInfrastructure

amends "../metamodel/ArchitectureMetamodel.pkl"

// ============ TECHNOLOGY NODES ============

applicationServer: TechnologyNode = new {
  id = "TN01"
  name = "Application Server"
  description = "Primary server hosting business applications"
  nodeType = "Server"
  location = "Data Center Zurich"
  capacity = "16 vCPU, 64 GB RAM"
  operatingSystem = "Ubuntu 22.04 LTS"
}

databaseServer: TechnologyNode = new {
  id = "TN02"
  name = "Database Server"
  description = "Dedicated server for database workloads"
  nodeType = "Server"
  location = "Data Center Zurich"
  capacity = "8 vCPU, 32 GB RAM, 2TB SSD"
  operatingSystem = "Ubuntu 22.04 LTS"
}

webLoadBalancer: TechnologyNode = new {
  id = "TN03"
  name = "Web Load Balancer"
  description = "Load balancer for web traffic distribution"
  nodeType = "Network"
  location = "Data Center Zurich"
  capacity = "High Availability Cluster"
}

// ============ SYSTEM SOFTWARE ============

javaRuntime: SystemSoftware = new {
  id = "SW01"
  name = "Java Runtime Environment"
  description = "JRE for running Java applications"
  softwareType = "Runtime"
  vendor = "Eclipse Adoptium"
  version = "17"
}

mysqlDatabase: SystemSoftware = new {
  id = "SW02"
  name = "MySQL Database"
  description = "Relational database management system"
  softwareType = "Database"
  vendor = "Oracle"
  version = "8.0"
}

postgresqlDatabase: SystemSoftware = new {
  id = "SW03"
  name = "PostgreSQL Database"
  description = "Advanced open-source relational database"
  softwareType = "Database"
  vendor = "PostgreSQL Global Development Group"
  version = "15"
}

nginxWebServer: SystemSoftware = new {
  id = "SW04"
  name = "Nginx Web Server"
  description = "High-performance web server and reverse proxy"
  softwareType = "Middleware"
  vendor = "Nginx Inc."
  version = "1.24"
}

dockerContainer: SystemSoftware = new {
  id = "SW05"
  name = "Docker Container Runtime"
  description = "Container runtime for application deployment"
  softwareType = "Runtime"
  vendor = "Docker Inc."
  version = "24.0"
}

// ============ TECHNOLOGY SERVICES ============

computeService: TechnologyService = new {
  id = "TS01"
  name = "Compute Service"
  description = "Virtual machine compute resources"
  serviceCategory = "Compute"
  provider = "Internal"
}

storageService: TechnologyService = new {
  id = "TS02"
  name = "Storage Service"
  description = "Persistent storage for applications and data"
  serviceCategory = "Storage"
  provider = "Internal"
}

networkService: TechnologyService = new {
  id = "TS03"
  name = "Network Service"
  description = "Internal network connectivity and routing"
  serviceCategory = "Network"
  provider = "Internal"
}

monitoringService: TechnologyService = new {
  id = "TS04"
  name = "Monitoring Service"
  description = "Infrastructure and application monitoring"
  serviceCategory = "Monitoring"
  provider = "Internal"
}

// ============ TECHNOLOGY INTERFACES ============

httpInterface: TechnologyInterface = new {
  id = "TI01"
  name = "HTTP Interface"
  description = "Standard HTTP protocol interface"
  protocol = "HTTP/HTTPS"
  port = 80
}

httpsInterface: TechnologyInterface = new {
  id = "TI02"
  name = "HTTPS Interface"
  description = "Secure HTTP protocol interface"
  protocol = "HTTPS"
  port = 443
}

mysqlInterface: TechnologyInterface = new {
  id = "TI03"
  name = "MySQL Database Interface"
  description = "MySQL database connection interface"
  protocol = "MySQL"
  port = 3306
}

postgresInterface: TechnologyInterface = new {
  id = "TI04"
  name = "PostgreSQL Database Interface"
  description = "PostgreSQL database connection interface"
  protocol = "PostgreSQL"
  port = 5432
}

// ============ ARTIFACTS ============

applicationConfig: Artifact = new {
  id = "ART01"
  name = "Application Configuration"
  description = "Configuration files for applications"
  artifactType = "Configuration"
  format = "YAML/JSON"
}

applicationData: Artifact = new {
  id = "ART02"
  name = "Application Data"
  description = "Business data stored by applications"
  artifactType = "Data"
  format = "Relational Database"
}

// ============ TECHNOLOGY RELATIONSHIPS ============

local appServerHostsJava: Relationship = new {
  id = "TREL01"
  description = "Application Server hosts Java Runtime"
  source = applicationServer
  target = javaRuntime
}

local dbServerHostsMySQL: Relationship = new {
  id = "TREL02"
  description = "Database Server hosts MySQL Database"
  source = databaseServer
  target = mysqlDatabase
}

local dbServerHostsPostgreSQL: Relationship = new {
  id = "TREL03"
  description = "Database Server hosts PostgreSQL Database"
  source = databaseServer
  target = postgresqlDatabase
}

local loadBalancerHostsNginx: Relationship = new {
  id = "TREL04"
  description = "Load Balancer hosts Nginx Web Server"
  source = webLoadBalancer
  target = nginxWebServer
}

local appServerProvidesCompute: Relationship = new {
  id = "TREL05"
  description = "Application Server provides Compute Service"
  source = applicationServer
  target = computeService
}

local dbServerProvidesStorage: Relationship = new {
  id = "TREL06"
  description = "Database Server provides Storage Service"
  source = databaseServer
  target = storageService
}

local loadBalancerProvidesNetwork: Relationship = new {
  id = "TREL07"
  description = "Load Balancer provides Network Service"
  source = webLoadBalancer
  target = networkService
}

local nginxExposesHTTP: Relationship = new {
  id = "TREL08"
  description = "Nginx exposes HTTP Interface"
  source = nginxWebServer
  target = httpInterface
}

local nginxExposesHTTPS: Relationship = new {
  id = "TREL09"
  description = "Nginx exposes HTTPS Interface"
  source = nginxWebServer
  target = httpsInterface
}

local mysqlExposesInterface: Relationship = new {
  id = "TREL10"
  description = "MySQL exposes database interface"
  source = mysqlDatabase
  target = mysqlInterface
}

local postgresExposesInterface: Relationship = new {
  id = "TREL11"
  description = "PostgreSQL exposes database interface"
  source = postgresqlDatabase
  target = postgresInterface
}